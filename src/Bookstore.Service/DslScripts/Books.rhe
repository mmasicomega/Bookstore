Module Bookstore
{
    Entity Book
    {
        ShortString Code { AutoCode; DefaultValue 'item => "BID+++++++"'; DenyUserEdit; }
        ShortString Title { Required; }
        Integer NumberOfPages { MaxValue 5000; MinValue 1; }

        Reference Author Bookstore.Person;
        

        DateTime TimeCreated { CreationTime; }

        Logging { AllProperties; }

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity" Please use "curiosity".';

        ItemFilter LongBooks 'item => item.NumberOfPages >= 500';

        ItemFilter ForeignAuthorXWithComments 'item =>
            item.Author.Name.StartsWith("X")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';

        ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.NumberOfPages >= 500);
            }';

        ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                {
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                }
                return filtered;
            }';

        FilterBy ComplexSearch '(repository, parameter) =>
            {
                var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                {
                    query = query.Where(item => item.Extension_ForeignBook.ID != null);
                }
                Book[] books = query.ToSimple().ToArray();

                if (parameter.MaskTitles == true)
                {
                    foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    {
                        book.Title = book.Title.First() + "***" + book.Title.Last();
                    }
                }

                return books;
            }';


            // Deactivatable { DeactivateOnDelete; }
            
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter LongBooks2;

    Entity Person
    {
        ShortString Name;

        DateTime dateOfBirth;
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
        DateTime TimeModified { ModificationTimeOf Bookstore.Comment.Text; }
        Logging { Log Bookstore.Comment.Text; }
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo;
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Hardcoded Genre
    {
        ShortString Label;
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }

    Entity Disposal
    {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }

        ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 500';
        InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';

        ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';
        InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';
    }

    Entity BookRating
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    // ------------------------------------------------------------------------------------

    Entity Review
    {
        Reference Book { Required; }
        Integer Score { Required; MinValue 1; MaxValue 5; }
        LongString Text;
        DateTime LastModifiedTime;

        SaveMethod
        {
            // ... Insert the examples from this tutorial here. ...
            Initialization DefaultTextFromScore
            '
                foreach (var item in insertedNew)
                    if (string.IsNullOrEmpty(item.Text) && item.Score != null)
                        item.Text = item.Score.Value >= 3
                            ? "I like it"
                            : "I don''t like it";
                
                var currentTime = DateTime.Now;
                foreach (var item in updatedNew) 
                {
                    item.LastModifiedTime = currentTime;
                }
            ';

            LoadOldItems
            {
                Take Score;
                Take 'Book.Title';
            }

            
        }
    }

}