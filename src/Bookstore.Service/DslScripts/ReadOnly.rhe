Module Bookstore
{
	Browse Bookgrid Bookstore.Book
	{
		Take Code;
		Take Title;
		Take 'Author.Name';
		Take TranslatorName 'Extension_ForeignBook.Translator.Name';
		Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
	}

	SqlQueryable BookInfo <SQL\BookInfo.sql>
	{
		Extends Bookstore.Book;
		Integer NumberOfComments;

		AutodetectSqlDependencies;
	}

	Computed ExpectedBookRating 
		'repository =>
			{
				var books = repository.Bookstore.Book.Query()
					.Select(b =>
						new 
						{
							b.ID,
							b.Title,
							IsForeign = b.Extension_ForeignBook.ID != null
						})
					.ToList();

				var ratings = new List<ExpectedBookRating>();
				foreach (var book in books)
				{
					decimal rating = 0;

					if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0) 
					{
						rating += 100;	
					}

					if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
					{
						rating += 10;
					}

					if (book.IsForeign)
					{
						rating *= 1.2m;
					}

					ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
				}

				return ratings.ToArray();
			}'
	{
		Extends Bookstore.Book;
		Decimal Rating;
	}

	// ---------------------------------------------------------------------------------------------

	SqlQueryable BookTopicsInfo <SQL\BookTopicsInfo.sql>
	{
		Extends Bookstore.Book;
		Integer NumberOfTopics;

		AutodetectSqlDependencies;
	}

	Browse BookTopicsGrid Bookstore.Book
	{
		Take Title;
		Take 'Author.Name';
		Take NumberOfTopics 'Extension_BookTopicsInfo.NumberOfTopics';
	}

}